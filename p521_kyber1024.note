1. We need to use p521_kyber1024 to inter-operate bouncycastle with liboqs/openssl for the following reason.

1.1 For p256_kyber512, shared secret generated by liboqs is 32 bytes
1.2 For p256_kyber512, shared secret generated by bouncycastle is 16 bytes

2. For p521_kyber1024, the cure must be p521 cure and the hash algorithm must be SHA512withECDSA

3. We need to use latest bouncycastle, the version of generated jar from bouncycastle is 173b06

3.1 cd open-quantum-safe, git clone https://github.com/Open-QKD-Network/bc-java.git

3.2 build bouncycastle

kxie@kxie-ubuntu-20:~/open-quantum-safe/bc-java$ sh ./build1-8+

3.3 we need to install jar to local (~/.m2) to build java server and client code with mvn clean package

kxie@kxie-ubuntu-20:~/open-quantum-safe/bc-java/build/artifacts/jdk1.8/jars

mvn install:install-file -Dfile=bcpkix-jdk18on-173b06.jar -DgroupId=org.bouncycastle -DartifactId=bcpkix-jdk18on -Dversion=173b06 -Dpackaging=jar
mvn install:install-file -Dfile=bctls-jdk18on-173b06.jar -DgroupId=org.bouncycastle -DartifactId=bctls-jdk18on -Dversion=173b06 -Dpackaging=jar
mvn install:install-file -Dfile=bcprov-jdk18on-173b06.jar -DgroupId=org.bouncycastle -DartifactId=bcprov-jdk18on -Dversion=173b06 -Dpackaging=jar
mvn install:install-file -Dfile=bcutil-jdk18on-173b06.jar -DgroupId=org.bouncycastle -DartifactId=bcutil-jdk18on -Dversion=173b06 -Dpackaging=jar

3.4 we need to copy jars file to lib172b06 to run java server/client

cp *.jar ~/open-quantum-safe/lib172b06/

4. Java server with Java client

4.1 kxie@kxie-ubuntu-20:~/open-quantum-safe/oqs-bouncycastle/javapqc$ ./run-tls-server.sh 

4.2 kxie@kxie-ubuntu-20:~/open-quantum-safe/oqs-bouncycastle/javapqc$ ./run-tls-client.sh 

kxie@kxie-ubuntu-20:~/open-quantum-safe/oqs-bouncycastle/javapqc$ more run-tls-server.sh 
java -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=p521_kyber1024 -cp target/javapqc-0.0.1-SNAPSHOT.jar:../../lib172b06/* com.g
oodstartsoft.pqc.TLSServer
#java -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=p256_frodo640aes -cp target/javapqc-0.0.1-SNAPSHOT.jar:../../lib172b06/* co
m.goodstartsoft.pqc.TLSServer
#java -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=secp256r1 -cp target/javapqc-0.0.1-SNAPSHOT.jar:../../lib/* com.goodstartso
ft.pqc.TLSServer

ava -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=p521_kyber1024 -cp target/javapqc-0.0.1-SNAPSHOT.jar:..
/../lib172b06/* com.goodstartsoft.pqc.TLSClient
#java -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=p256_frodo640aes -cp target/javapqc-0.0.1-SNAPSHOT.jar
:../../lib/* com.goodstartsoft.pqc.TLSClient
#java -Djava.util.logging.config.file=logging.properties -Djdk.tls.namedGroups=secp256r1 -cp target/javapqc-0.0.1-SNAPSHOT.jar:../../
lib/* com.goodstartsoft.pqc.TLSClient

5. Java server with openssl + liboqs client

5.1 run java server 

kxie@kxie-ubuntu-20:~/open-quantum-safe/oqs-bouncycastle/javapqc$ ./run-tls-server.sh

5.2 export LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/home/kxie/open-quantum-safe/openssl-install/openssl/lib/

5.3 run-tls-server.sh generates java p12 certificate, we need to convert p12 to pem for certificate (123456 password)

kxie@kxie-ubuntu-20:~/open-quantum-safe$ openssl pkcs12 -in ~/Desktop/identity512.p12 -out ~/Desktop/cert512.pem -clcerts -nokeys
Enter Import Password:

5.4 run openssl/liboqs client

kxie@kxie-ubuntu-20:~/open-quantum-safe$ openssl-install/openssl/bin/openssl s_client -groups p521_kyber1024 -CAfile ~/Desktop/cert512.pem -connect 127.0.0.1:8080

6. Run spring boot with p521_kyber1024

*** Springboot can only use RSA certificate ***

6.1 git clone https://github.com/kaiduanx/springboot-tls.git
6.2 cd example1, mvn clean package
6.3 run.sh
6.4 cd openquantum-safe

openssl-install/openssl/bin/openssl s_client -groups p521_kyber1024 -CAfile ./springboot-demo-cert.pem -connect 127.0.0.1:8080
